import logging
import random
import os
import json
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
from gtts import gTTS
from db import init_db, add_user, save_progress, get_progress
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –°–ª–æ–≤–∞—Ä—å —Ç–µ–º –∏ —Å–ª–æ–≤ ---
WORDS_BY_TOPIC = {}

def load_word_topics(folder_path="word_topics"):
    for filename in os.listdir(folder_path):
        if filename.endswith(".json"):
            topic_name = filename[:-5]
            path = os.path.join(folder_path, filename)
            try:
                with open(path, encoding="utf-8") as f:
                    words = json.load(f)
                    if isinstance(words, list) and all(isinstance(w, dict) for w in words):
                        WORDS_BY_TOPIC[topic_name] = words
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")

load_word_topics()

# --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö MP3-—Ñ–∞–π–ª–æ–≤ ---
def cleanup_old_mp3(folder="audio", max_age_minutes=30):
    now = time.time()
    max_age = max_age_minutes * 60

    if not os.path.exists(folder):
        return

    for filename in os.listdir(folder):
        if filename.endswith(".mp3"):
            path = os.path.join(folder, filename)
            try:
                if os.path.isfile(path) and now - os.path.getmtime(path) > max_age:
                    os.remove(path)
                    logging.info(f"üóë –£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {filename}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {e}")

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username or "")
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(topic.capitalize(), callback_data=f"topic_{topic}")]
            for topic in WORDS_BY_TOPIC
        ])
    )

# --- –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ ---
async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    topic = context.user_data.get("topic")
    if not topic or topic not in WORDS_BY_TOPIC:
        await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    words = WORDS_BY_TOPIC[topic]
    if not words:
        await query.message.reply_text("‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤.")
        return

    word = random.choice(words)
    text = f"üìå <b>{word['nl']}</b> ‚Äî {word['en']}\nüìù <i>{word['example']}</i>"


    try:
        os.makedirs("audio", exist_ok=True)
        cleanup_old_mp3("audio", max_age_minutes=30)

        filename = f"audio/{word['nl'].replace(' ', '_')}.mp3"
        tts = gTTS(word["nl"], lang="nl")
        tts.save(filename)

        save_progress(user.id, word["nl"])

        with open(filename, "rb") as audio_file:
            await query.message.reply_audio(audio=audio_file, caption=text, parse_mode="HTML")

    except Exception as e:
        logging.error(f"TTS error: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

    await query.message.reply_text("üëâ –•–æ—á–µ—à—å –µ—â—ë?", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üìò –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="new_word")]
    ]))

# --- /progress ---
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    count = get_progress(user.id)
    await update.message.reply_text(f"üìä –¢—ã —É–∂–µ –≤—ã—É—á–∏–ª {count} —Å–ª–æ–≤! üí™")

# --- –í—ã–±–æ—Ä —Ç–µ–º—ã ---
async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    topic = query.data.replace("topic_", "")
    if topic not in WORDS_BY_TOPIC:
        await query.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    context.user_data["topic"] = topic
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: <b>{topic.capitalize()}</b>. –í–æ—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:", parse_mode="HTML")
    await handle_word(update, context)

# --- /test ---
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    send_target = update.callback_query.message if update.callback_query else update.message
    if update.callback_query:
        await update.callback_query.answer()

    topic = context.user_data.get("topic")
    if not topic:
        await send_target.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    word = random.choice(WORDS_BY_TOPIC[topic])
    correct = word["en"]

    all_words = [w["en"] for t in WORDS_BY_TOPIC.values() for w in t if w["en"] != correct]
    wrong_answers = random.sample(all_words, 2)
    options = wrong_answers + [correct]
    random.shuffle(options)

    context.user_data["test_word"] = word

    buttons = [[InlineKeyboardButton(opt, callback_data=f"answer_{opt}")] for opt in options]
    await send_target.reply_text(
        f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{word['nl']}</b>?",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# --- –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç ---
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected = query.data.replace("answer_", "")
    word = context.user_data.get("test_word")

    if not word:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ /test —Å–Ω–æ–≤–∞.")
        return

    correct = word["en"]
    if selected == correct:
        msg = f"‚úÖ –í–µ—Ä–Ω–æ! {word['nl']} ‚Äî {correct}"
    else:
        msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. {word['nl']} ‚Äî {correct}, –∞ –Ω–µ {selected}"

    await query.message.reply_text(msg)
    await query.message.reply_text(
        "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üß™ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_test")]
        ])
    )

# --- –ù–æ–≤—ã–π —Ç–µ—Å—Ç ---
async def new_test_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start_test(update, context)

# --- /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/progress ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π\n"
        "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ."
    )

# --- Main ---
def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CommandHandler("test", start_test))
    app.add_handler(CommandHandler("help", help_command))

    app.add_handler(CallbackQueryHandler(handle_word, pattern="^new_word$"))
    app.add_handler(CallbackQueryHandler(choose_topic, pattern="^topic_"))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
    app.add_handler(CallbackQueryHandler(new_test_question, pattern="^new_test$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
